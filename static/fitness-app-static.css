// Initialize user state from localStorage on page load
let currentUserId = localStorage.getItem('user_id');
let currentUsername = localStorage.getItem('username');

// Document ready handler
document.addEventListener('DOMContentLoaded', function() {
    // Check for user session
    currentUserId = localStorage.getItem('user_id');
    currentUsername = localStorage.getItem('username');
    
    console.log('Current user state:', { currentUserId, currentUsername });
    
    if (currentUserId) {
        fetchGoals();
        displayUsername();
    } else if (window.location.pathname === '/dashboard') {
        // Redirect to login if accessing dashboard without auth
        window.location.href = '/';
    }
});

// Authentication Functions
function register() {
    const username = document.getElementById('register-username').value;
    const email = document.getElementById('register-email').value;
    const password = document.getElementById('register-password').value;

    if (!username || !email || !password) {
        showErrorMessage('Please fill in all fields');
        return;
    }

    fetch('/register', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            username,
            email,
            password
        }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showSuccessMessage('Registration successful! Please log in.');
            setTimeout(() => {
                window.location.href = '/';
            }, 1500);
        } else {
            showErrorMessage(data.error || 'Registration failed. Please try again.');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showErrorMessage('Registration failed. Please try again.');
    });
}

function login() {
    const username = document.getElementById('username').value;
    const password = document.getElementById('password').value;

    if (!username || !password) {
        showErrorMessage('Please enter both username and password');
        return;
    }
    
    fetch('/login', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            username,
            password
        }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Store user data both in variables and localStorage
            currentUserId = data.user_id;
            currentUsername = data.username;
            localStorage.setItem('user_id', data.user_id);
            localStorage.setItem('username', data.username);
            
            console.log('Login successful, stored data:', {
                currentUserId,
                currentUsername
            });
            
            showSuccessMessage('Login successful!');
            setTimeout(() => {
                window.location.href = '/dashboard';
            }, 1000);
        } else {
            showErrorMessage(data.error || 'Login failed. Please check your credentials.');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showErrorMessage('Login failed. Please try again.');
    });
}

function logout() {
    // Clear both local variables and localStorage
    currentUserId = null;
    currentUsername = null;
    localStorage.removeItem('user_id');
    localStorage.removeItem('username');
    window.location.href = '/';
}

// Goal Management Functions
function openAddGoalModal() {
    // Verify user is logged in before opening modal
    if (!localStorage.getItem('user_id')) {
        showErrorMessage('Please login first');
        window.location.href = '/';
        return;
    }
    
    const modal = document.getElementById('add-goal-modal');
    if (modal) {
        modal.style.display = 'block';
    }
}

function closeAddGoalModal() {
    const modal = document.getElementById('add-goal-modal');
    if (modal) {
        modal.style.display = 'none';
        // Clear form fields
        document.getElementById('goal-category').value = '';
        document.getElementById('goal-description').value = '';
        document.getElementById('goal-target-date').value = '';
    }
}

function createGoal() {
    // Get userId from storage
    const userId = localStorage.getItem('user_id');
    console.log('Creating goal with user ID:', userId);
    
    if (!userId) {
        showErrorMessage('Please login first');
        window.location.href = '/';
        return;
    }

    const category = document.getElementById('goal-category').value;
    const description = document.getElementById('goal-description').value;
    const targetDate = document.getElementById('goal-target-date').value;

    if (!category || !description || !targetDate) {
        showErrorMessage('Please fill in all fields');
        return;
    }

    const createButton = document.querySelector('#create-goal-btn');
    if (createButton) {
        createButton.disabled = true;
        createButton.textContent = 'Creating...';
    }

    const goalData = {
        user_id: userId,
        category: category,
        description: description,
        target_date: targetDate
    };

    console.log('Sending goal data:', goalData);

    fetch('/set_goal', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(goalData)
    })
    .then(response => {
        console.log('Response status:', response.status);
        return response.json().then(data => {
            if (!response.ok) {
                throw new Error(data.error || 'Failed to create goal');
            }
            return data;
        });
    })
    .then(data => {
        console.log('Success response:', data);
        closeAddGoalModal();
        showSuccessMessage('Goal created successfully!');
        fetchGoals(); // Refresh the goals list
    })
    .catch(error => {
        console.error('Error:', error);
        showErrorMessage(error.message || 'Failed to create goal');
    })
    .finally(() => {
        if (createButton) {
            createButton.disabled = false;
            createButton.textContent = 'Create Goal';
        }
    });
}

function fetchGoals() {
    const userId = localStorage.getItem('user_id');
    if (!userId) {
        console.error('No user ID found');
        return;
    }

    console.log('Fetching goals for user:', userId);

    fetch(`/get_goals/${userId}`)
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        console.log('Received goals:', data);
        const goalsContainer = document.getElementById('goals-container');
        if (!goalsContainer) {
            console.error('Goals container not found');
            return;
        }
        goalsContainer.innerHTML = '';
        const goals = Array.isArray(data) ? data : data.goals;
        goals.forEach(goal => {
            const goalElement = createGoalCard(goal);
            goalsContainer.appendChild(goalElement);
        });
    })
    .catch(error => {
        console.error('Error fetching goals:', error);
        showErrorMessage('Failed to fetch goals');
    });
}

// Utility functions remain the same but with improved error handling
function showSuccessMessage(message) {
    console.log('Success:', message);
    const alertDiv = document.createElement('div');
    alertDiv.className = 'alert alert-success';
    alertDiv.textContent = message;
    
    let alertContainer = document.querySelector('.alert-container');
    if (!alertContainer) {
        alertContainer = document.createElement('div');
        alertContainer.className = 'alert-container';
        document.body.appendChild(alertContainer);
    }
    
    alertContainer.appendChild(alertDiv);
    setTimeout(() => alertDiv.remove(), 3000);
}

function showErrorMessage(message) {
    console.log('Error:', message);
    const alertDiv = document.createElement('div');
    alertDiv.className = 'alert alert-danger';
    alertDiv.textContent = message;
    
    let alertContainer = document.querySelector('.alert-container');
    if (!alertContainer) {
        alertContainer = document.createElement('div');
        alertContainer.className = 'alert-container';
        document.body.appendChild(alertContainer);
    }
    
    alertContainer.appendChild(alertDiv);
    setTimeout(() => alertDiv.remove(), 5000);
    }

function createGoalCard(goal) {
    const card = document.createElement('div');
    card.className = 'goal-card';
    
    // Calculate progress color based on goal progress
    const progressColor = getProgressColor(goal.progress || 0);
    
    card.innerHTML = `
        <div class="goal-card-header" style="border-left: 4px solid ${progressColor}">
            <div class="goal-category">${goal.category}</div>
            <div class="goal-progress">
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${goal.progress || 0}%; background-color: ${progressColor}"></div>
                </div>
                <span>${goal.progress || 0}%</span>
            </div>
        </div>
        <div class="goal-description">${goal.description}</div>
        <div class="goal-meta">
            <span><i class="fas fa-calendar"></i> ${new Date(goal.target_date).toLocaleDateString()}</span>
        </div>
        <div class="goal-actions">
            <button onclick="viewGoalDetails(${goal.id})" class="action-button">
                <i class="fas fa-chart-line"></i> Track Progress
            </button>
            <button onclick="updateGoal(${goal.id})" class="action-button">
                <i class="fas fa-edit"></i> Edit
            </button>
            <button onclick="deleteGoal(${goal.id})" class="action-button delete">
                <i class="fas fa-trash"></i> Delete
            </button>
        </div>
    `;
    return card;
}

function getProgressColor(progress) {
    if (progress < 30) return '#ff4444';  // Red for low progress
    if (progress < 70) return '#ffbb33';  // Orange for medium progress
    return '#00C851';  // Green for good progress
}

function viewGoalDetails(goalId) {
    window.location.href = `/goal/${goalId}`;
}

function updateGoal(goalId) {
    fetch(`/get_goal/${goalId}`)
        .then(response => response.json())
        .then(goal => {
            const newCategory = prompt("New category:", goal.category);
            const newDescription = prompt("New description:", goal.description);
            const newTargetDate = prompt("New target date (YYYY-MM-DD):", goal.target_date);

            if (!newCategory && !newDescription && !newTargetDate) return;

            fetch('/update_goal', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    id: goalId,
                    category: newCategory || goal.category,
                    description: newDescription || goal.description,
                    target_date: newTargetDate || goal.target_date
                }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    fetchGoals();
                } else {
                    alert('Failed to update goal');
                }
            });
        })
        .catch(error => console.error('Error:', error));
}

function deleteGoal(goalId) {
    if (confirm('Are you sure you want to delete this goal?')) {
        fetch(`/delete_goal/${goalId}`, {
            method: 'DELETE',
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                fetchGoals();
            } else {
                alert('Failed to delete goal');
            }
        })
        .catch(error => console.error('Error:', error));
    }
}

// Progress Update Functions
function addProgressUpdate(goalId) {
    const updateText = document.getElementById('progress-update').value;
    if (!updateText.trim()) {
        alert('Please enter your progress update');
        return;
    }

    fetch(`/update_progress/${goalId}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            update_text: updateText
        }),
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            document.getElementById('progress-update').value = '';
            fetchProgressUpdates(goalId);
            if (data.analysis) {
                document.getElementById('ai-analysis').innerHTML = data.analysis;
            }
        } else {
            alert('Failed to add progress update');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Failed to add progress update');
    });
}

function fetchProgressUpdates(goalId) {
    fetch(`/get_progress/${goalId}`)
        .then(response => response.json())
        .then(data => {
            const updatesContainer = document.getElementById('progress-updates');
            updatesContainer.innerHTML = '';
            data.progress_updates.forEach(update => {
                const updateElement = createProgressUpdateElement(update);
                updatesContainer.appendChild(updateElement);
            });
        })
        .catch(error => console.error('Error:', error));
}

function createProgressUpdateElement(update) {
    const div = document.createElement('div');
    div.className = 'progress-update';
    div.innerHTML = `
        <div class="update-text">${update.update_text}</div>
        <div class="update-meta">
            <span class="update-date">${new Date(update.created_at).toLocaleString()}</span>
        </div>
        <div class="ai-feedback">${update.analysis || ''}</div>
    `;
    return div;
}

// Utility Functions
function displayUsername() {
    const usernameElement = document.getElementById('username-display');
    if (usernameElement && currentUsername) {
        usernameElement.textContent = `Welcome, ${currentUsername}!`;
    }
}

// Close modal when clicking outside
window.onclick = function(event) {
    const modal = document.getElementById('add-goal-modal');
    if (event.target == modal) {
        closeAddGoalModal();
    }
}

// Error handling
function handleError(error) {
    console.error('Error:', error);
    alert('An error occurred. Please try again.');
}
